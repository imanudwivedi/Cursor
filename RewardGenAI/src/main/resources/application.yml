server:
  port: 8080
  servlet:
    context-path: /api/v1

spring:
  application:
    name: reward-query-bot
  
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=300s

# AI Service Configuration
ai:
  openai:
    api-key: ${OPENAI_API_KEY:your-openai-api-key}
    model: gpt-3.5-turbo
    max-tokens: 500
    temperature: 0.7
    system-prompt: |
      You are a helpful AI assistant for a rewards program. Your role is to:
      1. Help customers and agents with reward-related queries
      2. Provide clear, concise, and friendly responses
      3. Use the provided reward data to answer questions about points, redemptions, and benefits
      4. Always be encouraging about reward usage and benefits
      5. Format numbers clearly (e.g., 5,000 points)
      6. Suggest alternatives when specific requests cannot be fulfilled

# Microservice Integration
microservices:
  rewards:
    base-url: ${REWARDS_SERVICE_URL:http://localhost:8081}
    timeout: 5000
  redemption:
    base-url: ${REDEMPTION_SERVICE_URL:http://localhost:8082}
    timeout: 5000
  customer:
    base-url: ${CUSTOMER_SERVICE_URL:http://localhost:8083}
    timeout: 5000

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      rewardService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 10000
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 3000
  retry:
    instances:
      rewardService:
        max-attempts: 3
        wait-duration: 1000
        exponential-backoff-multiplier: 2

# Logging Configuration
logging:
  level:
    com.genai.rewards: DEBUG
    org.springframework.cloud: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Management and Health Check
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true 